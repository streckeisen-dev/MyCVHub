name: MyCV CI/CD pipeline

permissions:
  id-token: write
  contents: write
  checks: write

on:
  push:
    branches:
      - '**'

jobs:
  i18n:
    runs-on: ubuntu-latest
    container:
      image: lstreckeisen/my-cv-github-image:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check I18n files
      working-directory: locales
      run: python check_keys.py

  build-frontend:
    runs-on: ubuntu-latest
    container:
      image: lstreckeisen/my-cv-github-image:latest
    needs:
      - i18n

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare i18n files
      working-directory: locales
      run: |
        python generate_messages.py --type frontend
    
    # required since test report action uses git
    - name: Configure Git Safe Directory
      run: |
        REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
        git config --global --add safe.directory "/__w/$REPO_NAME/$REPO_NAME"
    
    - name: Install dependencies
      working-directory: frontend
      run: yarn install --frozen-lockfile
    
    - name: Test frontend
      working-directory: frontend
      run: yarn test
    
    - name: Frontend test report
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Frontend Test Results
        path: frontend/test-results.xml
        reporter: java-junit

    - name: Build frontend
      working-directory: frontend
      run: yarn build

    - name: Upload frontend artifact (non-main)
      if: github.ref != 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifact
        path: frontend/dist/
        retention-days: 2
    - name: Upload frontend artifact (main)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifact
        path: frontend/dist/
        retention-days: 30
  
  build-backend:
    runs-on: ubuntu-latest
    container:
      image: lstreckeisen/my-cv-github-image:latest
    needs:
      - i18n

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare i18n files
      working-directory: locales
      run: |
        python generate_messages.py --type backend

    # required since test report action uses git
    - name: Configure Git Safe Directory
      run: |
        REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
        git config --global --add safe.directory "/__w/$REPO_NAME/$REPO_NAME"

    - name: Cache maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
    
    - name: Test backend
      working-directory: backend
      run: ./mvnw clean test
    
    - name: Backend test report
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: JUnit Test Results
        path: backend/target/surefire-reports/TEST-*.xml
        reporter: java-junit

    - name: Build backend
      working-directory: backend
      run: ./mvnw clean package -DskipTests
    
    - name: Upload backend artifact (non-main)
      if: github.ref != 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifact
        path: backend/target/mycv.jar
        retention-days: 2
    - name: Upload backend artifact (main)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifact
        path: backend/target/mycv.jar
        retention-days: 30
  
  cypress-test:
    name: Cypress Test
    runs-on: ubuntu-latest
    needs:
      - build-frontend
    container:
      image: cypress/browsers:22.13.1
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: yarn build
          start: npm dev
          browser: firefox
  
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs:
      - build-frontend
      - build-backend
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-artifact
        path: ./frontend/dist
    
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-artifact
        path: ./backend/target
    
    - name: Build Docker image
      run: |
        docker build -t my-cv:${{ github.sha }} .
    
    - name: Log in to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag my-cv:${{ github.sha }} lstreckeisen/my-cv:${{ github.sha }}
        docker push lstreckeisen/my-cv:${{ github.sha }}

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - docker-build
      - cypress-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create git version tag
      run: |
        cd backend/
        VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "VERSION=$VERSION"
        cd ..
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$VERSION" -m "v$VERSION"
        git push origin "v$VERSION"
    
    - name: Update DigitalOcean specs
      env: 
        DB_PW: ${{ secrets.DO_DB_PASSWORD }} | sed 's/[&/\]/\\&/g'
        JWT_SEC: ${{ secrets.DO_JWT_SECRET }} | sed 's/[&/\]/\\&/g'
        DOCK_SEC: ${{ secrets.DO_DOCKER_CREDENTIALS }} | sed 's/[&/\]/\\&/g'
      run: |
        cd .do/
        sed -i 's|latest|${{ github.sha }}|' my-cv-app.yaml
#        sed -i 's|{{ DO_DB_PASSWORD }}|{{ secrets.DO_DB_PASSWORD }}|g' my-cv-app.yaml
#        sed -i 's|{{ DO_JWT_SECRET }}|{{ secrets.DO_JWT_SECRET }}|g' my-cv-app.yaml
    
    - name: DigitalOcean App Platform deployment
      uses: digitalocean/app_action/deploy@v2
      with:
        project_id: 36885f94-3294-46d5-abe9-48952ce7bbfd
        token: ${{ secrets.DO_ACCESS_TOKEN }}
        app_spec_location: .do/my-cv-app.yaml
        print_build_logs: false
        print_deploy_logs: false
